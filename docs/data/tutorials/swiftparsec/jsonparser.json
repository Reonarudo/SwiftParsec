{"variants":[{"paths":["\/tutorials\/swiftparsec\/jsonparser"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"kind":"hero","title":"Building a JSON Parser with SwiftParsec","chapter":"Building a JSON Parser with SwiftParsec","estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this tutorial, we will explore the process of building a JSON parser using a tokenizer. While Swift already provides native support for JSON parsing using Codable, understanding the underlying principles and techniques can be valuable. We will leverage the power of SwiftParsec, which offers a GenericTokenParser type that simplifies the creation of tokenizers. By following this tutorial, you will gain insights into how JSON parsing works and enhance your understanding of parsing techniques in Swift. It’s worth noting that for most use cases, you can rely on Swift’s Codable protocol for JSON parsing. However, building a JSON parser from scratch allows us to dive deeper into the inner workings and principles of parsing in Swift. So let’s get started and build our own JSON parser!"}]}]},{"kind":"tasks","tasks":[{"anchor":"Digging-Deeper","title":"Digging Deeper","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Throughout this tutorial, we’ll explore the steps involved in building a JSON parser using the SwiftParsec library. We’ll cover tokenizing, parsing different JSON value types, handling recursive structures like arrays and objects, and accessing individual values from the parsed JSON structure."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"code":"json-1.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will set up the JSON parser using a tokenizer."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will be using the SwiftParsec library, which provides a type called GenericTokenParser that helps us build tokenizers. The JSON format is defined in RFC 4627. The parser will generate a data structure built from an enum representing the different JSON values."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-2.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will define parsers for symbols and string literals."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The symbol parser will parse symbols and skip any trailing white space, while the stringLiteral parser will parse strings and take care of any escaped characters."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-3.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will define parsers for symbols and string literals."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"jstring"},{"type":"text","text":" parser will parse a string literal and return a value of "},{"type":"codeVoice","code":"JSONValue.JString"},{"type":"text","text":" associated with the parsed string."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-4.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will create a parser to parse JSON number values."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"jnumber"},{"type":"text","text":" parser will parse a number literal and return a value of "},{"type":"codeVoice","code":"JSONValue.JNumber"},{"type":"text","text":" associated with the parsed number. We use the "},{"type":"codeVoice","code":"float"},{"type":"text","text":" and "},{"type":"codeVoice","code":"integerAsFloat"},{"type":"text","text":" parsers provided by "},{"type":"codeVoice","code":"GenericTokenParser"},{"type":"text","text":" to handle the different representations of numbers in JSON."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-5.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will create a parser to parse JSON boolean values."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"jbool"},{"type":"text","text":" parser will parse either “true” or “false” and return a value of "},{"type":"codeVoice","code":"JSONValue.JBool"},{"type":"text","text":" associated with the parsed boolean."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-6.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will create a parser to parse the JSON null value."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"jnull"},{"type":"text","text":" parser will parse the string “null” and return a value of "},{"type":"codeVoice","code":"JSONValue.JNull"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-7.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will define recursive parsers for JSON arrays and objects."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Since arrays and objects can contain other JSON values, including themselves, we need to create recursive parsers for handling them."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-8.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will define a parser to parse JSON arrays."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"jarray"},{"type":"text","text":" parser will parse zero or more JSON values separated by commas and enclosed in brackets."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-9.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will define a parser to parse JSON objects."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"jobject"},{"type":"text","text":" parser will parse one or more name\/value pairs enclosed in curly braces."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-10.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will combine all the JSON value parsers we defined so far."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The parsers for string, number, boolean, null, array, and object will be combined using the "},{"type":"codeVoice","code":"<|>"},{"type":"text","text":" operator to create the final JSON value parser."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-11.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we will complete the JSON parser by adding necessary code to handle whitespace and running the parser with the input data."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We handle any leading whitespace using "},{"type":"codeVoice","code":"lexer.whiteSpace"},{"type":"text","text":" and then parse either an object or an array using "},{"type":"codeVoice","code":"<|>"},{"type":"text","text":" operator."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-12.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we add an initializer to the "},{"type":"codeVoice","code":"JSONValue"},{"type":"text","text":" enum that takes a string as input and uses the JSON parser to parse the input data."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The initializer uses the "},{"type":"codeVoice","code":"run"},{"type":"text","text":" method of the JSON parser to parse the input data and assign the parsed value to "},{"type":"codeVoice","code":"self"},{"type":"text","text":"."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-13.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we add subscript methods and computed properties to the "},{"type":"codeVoice","code":"JSONValue"},{"type":"text","text":" enum to access individual values in the JSON structure."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These subscript methods and computed properties provide convenient access to individual values within the JSON structure."}]}],"type":"step","runtimePreview":null,"media":null},{"code":"json-14.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this step, we provide an example usage of the JSON parser and demonstrate how to retrieve individual values from the parsed JSON structure."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This example demonstrates how to parse a JSON text and retrieve individual values from the parsed JSON structure."}]}],"type":"step","runtimePreview":null,"media":null}]}]}],"identifier":{"url":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/JSONParser","interfaceLanguage":"swift"},"kind":"project","metadata":{"title":"Building a JSON Parser with SwiftParsec","categoryPathComponent":"Table-of-Contents","role":"project","category":"SwiftParsec Tutorials"},"hierarchy":{"modules":[{"reference":"doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents\/Building-a-CSV-Parser-with-SwiftParsec","projects":[{"reference":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/CSVParser","sections":[{"kind":"task","reference":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/CSVParser#Introduction-to-SwiftParsec"}]}]},{"reference":"doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents\/Building-a-JSON-Parser-with-SwiftParsec","projects":[{"reference":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/JSONParser","sections":[{"kind":"task","reference":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/JSONParser#Digging-Deeper"}]}]}],"reference":"doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents","paths":[["doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents","doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents\/$volume","doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents\/Building-a-JSON-Parser-with-SwiftParsec"]]},"references":{"json-5.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-5.swift","type":"file","fileType":"swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}]},"doc://SwiftParsec/tutorials/SwiftParsec/CSVParser#Introduction-to-SwiftParsec":{"role":"pseudoSymbol","title":"Introduction to SwiftParsec","abstract":[{"type":"text","text":"In this tutorial, we’ll walk through the process of building a CSV parser using SwiftParsec. The CSV (comma-separated values) format is commonly used for storing tabular data. We’ll leverage the power of SwiftParsec’s primitive and combinator parsers to create a robust and flexible CSV parser in just a few lines of code."}],"identifier":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/CSVParser#Introduction-to-SwiftParsec","kind":"section","type":"section","url":"\/tutorials\/swiftparsec\/csvparser#Introduction-to-SwiftParsec"},"doc://SwiftParsec/tutorials/SwiftParsec/JSONParser":{"role":"project","title":"Building a JSON Parser with SwiftParsec","estimatedTime":"20min","abstract":[{"type":"text","text":"In this tutorial, we will explore the process of building a JSON parser using a tokenizer. While Swift already provides native support for JSON parsing using Codable, understanding the underlying principles and techniques can be valuable. We will leverage the power of SwiftParsec, which offers a GenericTokenParser type that simplifies the creation of tokenizers. By following this tutorial, you will gain insights into how JSON parsing works and enhance your understanding of parsing techniques in Swift. It’s worth noting that for most use cases, you can rely on Swift’s Codable protocol for JSON parsing. However, building a JSON parser from scratch allows us to dive deeper into the inner workings and principles of parsing in Swift. So let’s get started and build our own JSON parser!"}],"identifier":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/JSONParser","kind":"project","type":"topic","url":"\/tutorials\/swiftparsec\/jsonparser"},"doc://SwiftParsec/tutorials/SwiftParsec/CSVParser":{"role":"project","title":"Building a CSV Parser with SwiftParsec","estimatedTime":"10min","abstract":[{"type":"text","text":"In this tutorial, we’ll walk through the process of building a CSV parser using SwiftParsec. The CSV (comma-separated values) format is commonly used for storing tabular data. We’ll leverage the power of SwiftParsec’s primitive and combinator parsers to create a robust and flexible CSV parser in just a few lines of code."}],"identifier":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/CSVParser","kind":"project","type":"topic","url":"\/tutorials\/swiftparsec\/csvparser"},"json-13.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        GenericParser.recursive { (jvalue: GenericParser<String, (), JSONValue>) in","            let jarrayValues = lexer.commaSeparated(jvalue)","            jarray = JSONValue.JArray <^> lexer.brackets(jarrayValues)","","            let nameValue: GenericParser<String, (), (String, JSONValue)> =","            stringLiteral >>- { name in","                symbol(\":\") *> jvalue.map { value in (name, value) }","            }","","            let dictionary: GenericParser<String, (), [String: JSONValue]> =","            (symbol(\",\") *> nameValue).manyAccumulator { (assoc, dict) in","                var dict = dict","                let (name, value) = assoc","                dict[name] = value","                return dict","            }","","            let jobjectDict: GenericParser<String, (), [String: JSONValue]> =","            nameValue >>- { assoc in","                dictionary >>- { (dict) in","                    var dict = dict","                    let (name, value) = assoc","                    dict[name] = value","                    return GenericParser(result: dict)","                }","            }","","            let jobjectValues = jobjectDict <|> GenericParser(result: [:])","            jobject = JSONValue.JObject <^> lexer.braces(jobjectValues)","","            return jstring <|> jnumber <|> jbool <|> jnull <|> jarray <|> jobject","        }","","        return lexer.whiteSpace *> (jobject <|> jarray)","    }()","","    public init(data: String) throws {","        try self = JSONValue.parser.run(sourceName: \"\", input: data)","    }","","    public var string: String? {","        guard case .JString(let str) = self else { return nil }","        return str","    }","","    public var double: Double? {","        guard case .JNumber(let dbl) = self else { return nil }","        return dbl","    }","","    public var bool: Bool? {","        guard case .JBool(let b) = self else { return nil }","        return b","    }","","    public var isNull: Bool {","        if case .JNull = self { return true }","        return false","    }","","    public subscript(name: String) -> JSONValue {","        guard case .JObject(let dict) = self,","              let value = dict[name] else { return .Error }","        return value","    }","","    public subscript(index: Int) -> JSONValue {","        guard case .JArray(let arr) = self,","              index >= 0 && index < arr.count else { return .Error }","        return arr[index]","    }","","}"],"fileName":"JSONParser.swift","identifier":"json-13.swift","type":"file","fileType":"swift","highlights":[{"line":75},{"line":76},{"line":77},{"line":78},{"line":80},{"line":81},{"line":82},{"line":83},{"line":84},{"line":85},{"line":86},{"line":87},{"line":88},{"line":89},{"line":90},{"line":91},{"line":92},{"line":93},{"line":94},{"line":95},{"line":96},{"line":97},{"line":98},{"line":99},{"line":100},{"line":101},{"line":102},{"line":103},{"line":104},{"line":105},{"line":106}]},"json-7.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-7.swift","type":"file","fileType":"swift","highlights":[{"line":32},{"line":33},{"line":34}]},"json-14.swift":{"syntax":"swift","content":["\/\/ Example JSON text","let jsonText = \"\"\"","{","    \"Image\": {","        \"Width\":  800,","        \"Height\": 600,","        \"Title\":  \"View from 15th Floor\",","        \"Thumbnail\": {","            \"Url\":    \"http:\/\/www.example.com\/image\/481989943\",","            \"Height\": 125,","            \"Width\":  \"100\"","        },","        \"IDs\": [116, 943, 234, 38793]","    }","}","\"\"\"","","do {","    \/\/ Parse the JSON text","    let json = try JSONValue(data: jsonText)","","    \/\/ Access individual values","    if let thumbnailHeight = json[\"Image\"][\"Thumbnail\"][\"Height\"].double {","        print(thumbnailHeight)","    }","} catch {","    print(\"Error parsing JSON: \\(error)\")","}"],"fileName":"JSONParser.swift","identifier":"json-14.swift","type":"file","fileType":"swift","highlights":[{"line":1},{"line":2},{"line":3},{"line":4},{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12},{"line":13},{"line":15},{"line":16},{"line":18},{"line":19},{"line":20},{"line":22},{"line":23},{"line":24},{"line":26},{"line":27}]},"doc://SwiftParsec/tutorials/Table-of-Contents/Building-a-CSV-Parser-with-SwiftParsec":{"role":"article","title":"Building a CSV Parser with SwiftParsec","abstract":[],"identifier":"doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents\/Building-a-CSV-Parser-with-SwiftParsec","kind":"article","type":"topic","url":"\/tutorials\/table-of-contents\/building-a-csv-parser-with-swiftparsec"},"json-6.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-6.swift","type":"file","fileType":"swift","highlights":[{"line":30},{"line":31}]},"doc://SwiftParsec/tutorials/Table-of-Contents":{"role":"overview","title":"Introduction to SwiftParsec","abstract":[{"type":"text","text":"Get ready to dive into the world of SwiftParsec! In this section, we’ll introduce you to SwiftParsec and its powerful parsing capabilities. Whether you’re new to parsing or have some experience, SwiftParsec provides a user-friendly and expressive approach to building parsers. Prepare to unlock the potential of parsing with SwiftParsec!"}],"identifier":"doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents","kind":"overview","type":"topic","url":"\/tutorials\/table-of-contents"},"json-11.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        GenericParser.recursive { (jvalue: GenericParser<String, (), JSONValue>) in","            let jarrayValues = lexer.commaSeparated(jvalue)","            jarray = JSONValue.JArray <^> lexer.brackets(jarrayValues)","","            let nameValue: GenericParser<String, (), (String, JSONValue)> =","            stringLiteral >>- { name in","                symbol(\":\") *> jvalue.map { value in (name, value) }","            }","","            let dictionary: GenericParser<String, (), [String: JSONValue]> =","            (symbol(\",\") *> nameValue).manyAccumulator { (assoc, dict) in","                var dict = dict","                let (name, value) = assoc","                dict[name] = value","                return dict","            }","","            let jobjectDict: GenericParser<String, (), [String: JSONValue]> =","            nameValue >>- { assoc in","                dictionary >>- { (dict) in","                    var dict = dict","                    let (name, value) = assoc","                    dict[name] = value","                    return GenericParser(result: dict)","                }","            }","","            let jobjectValues = jobjectDict <|> GenericParser(result: [:])","            jobject = JSONValue.JObject <^> lexer.braces(jobjectValues)","","            return jstring <|> jnumber <|> jbool <|> jnull <|> jarray <|> jobject","        }","","        return lexer.whiteSpace *> (jobject <|> jarray)","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-11.swift","type":"file","fileType":"swift","highlights":[{"line":68}]},"json-9.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        GenericParser.recursive { (jvalue: GenericParser<String, (), JSONValue>) in","            let jarrayValues = lexer.commaSeparated(jvalue)","            jarray = JSONValue.JArray <^> lexer.brackets(jarrayValues)","","            let nameValue: GenericParser<String, (), (String, JSONValue)> =","            stringLiteral >>- { name in","                symbol(\":\") *> jvalue.map { value in (name, value) }","            }","","            let dictionary: GenericParser<String, (), [String: JSONValue]> =","            (symbol(\",\") *> nameValue).manyAccumulator { (assoc, dict) in","                var dict = dict","                let (name, value) = assoc","                dict[name] = value","                return dict","            }","","            let jobjectDict: GenericParser<String, (), [String: JSONValue]> =","            nameValue >>- { assoc in","                dictionary >>- { (dict) in","                    var dict = dict","                    let (name, value) = assoc","                    dict[name] = value","                    return GenericParser(result: dict)","                }","            }","","            let jobjectValues = jobjectDict <|> GenericParser(result: [:])","            jobject = JSONValue.JObject <^> lexer.braces(jobjectValues)","","            \/\/ Rest of the code...","        }","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-9.swift","type":"file","fileType":"swift","highlights":[{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43},{"line":44},{"line":45},{"line":46},{"line":47},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":55},{"line":56},{"line":57},{"line":58},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64}]},"doc://SwiftParsec/tutorials/Table-of-Contents/Building-a-JSON-Parser-with-SwiftParsec":{"role":"article","title":"Building a JSON Parser with SwiftParsec","abstract":[],"identifier":"doc:\/\/SwiftParsec\/tutorials\/Table-of-Contents\/Building-a-JSON-Parser-with-SwiftParsec","kind":"article","type":"topic","url":"\/tutorials\/table-of-contents\/building-a-json-parser-with-swiftparsec"},"json-4.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-4.swift","type":"file","fileType":"swift","highlights":[{"line":23},{"line":24},{"line":25}]},"json-3.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-3.swift","type":"file","fileType":"swift","highlights":[{"line":21},{"line":22}]},"json-10.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        GenericParser.recursive { (jvalue: GenericParser<String, (), JSONValue>) in","            let jarrayValues = lexer.commaSeparated(jvalue)","            jarray = JSONValue.JArray <^> lexer.brackets(jarrayValues)","","            let nameValue: GenericParser<String, (), (String, JSONValue)> =","            stringLiteral >>- { name in","                symbol(\":\") *> jvalue.map { value in (name, value) }","            }","","            let dictionary: GenericParser<String, (), [String: JSONValue]> =","            (symbol(\",\") *> nameValue).manyAccumulator { (assoc, dict) in","                var dict = dict","                let (name, value) = assoc","                dict[name] = value","                return dict","            }","","            let jobjectDict: GenericParser<String, (), [String: JSONValue]> =","            nameValue >>- { assoc in","                dictionary >>- { (dict) in","                    var dict = dict","                    let (name, value) = assoc","                    dict[name] = value","                    return GenericParser(result: dict)","                }","            }","","            let jobjectValues = jobjectDict <|> GenericParser(result: [:])","            jobject = JSONValue.JObject <^> lexer.braces(jobjectValues)","","            return jstring <|> jnumber <|> jbool <|> jnull <|> jarray <|> jobject","        }","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-10.swift","type":"file","fileType":"swift","highlights":[{"line":65}]},"json-12.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        GenericParser.recursive { (jvalue: GenericParser<String, (), JSONValue>) in","            let jarrayValues = lexer.commaSeparated(jvalue)","            jarray = JSONValue.JArray <^> lexer.brackets(jarrayValues)","","            let nameValue: GenericParser<String, (), (String, JSONValue)> =","            stringLiteral >>- { name in","                symbol(\":\") *> jvalue.map { value in (name, value) }","            }","","            let dictionary: GenericParser<String, (), [String: JSONValue]> =","            (symbol(\",\") *> nameValue).manyAccumulator { (assoc, dict) in","                var dict = dict","                let (name, value) = assoc","                dict[name] = value","                return dict","            }","","            let jobjectDict: GenericParser<String, (), [String: JSONValue]> =","            nameValue >>- { assoc in","                dictionary >>- { (dict) in","                    var dict = dict","                    let (name, value) = assoc","                    dict[name] = value","                    return GenericParser(result: dict)","                }","            }","","            let jobjectValues = jobjectDict <|> GenericParser(result: [:])","            jobject = JSONValue.JObject <^> lexer.braces(jobjectValues)","","            return jstring <|> jnumber <|> jbool <|> jnull <|> jarray <|> jobject","        }","","        return lexer.whiteSpace *> (jobject <|> jarray)","    }()","","    public init(data: String) throws {","        try self = JSONValue.parser.run(sourceName: \"\", input: data)","    }","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-12.swift","type":"file","fileType":"swift","highlights":[{"line":71},{"line":72},{"line":73},{"line":74}]},"doc://SwiftParsec/tutorials/SwiftParsec/JSONParser#Digging-Deeper":{"role":"pseudoSymbol","title":"Digging Deeper","abstract":[{"type":"text","text":"In this tutorial, we will explore the process of building a JSON parser using a tokenizer. While Swift already provides native support for JSON parsing using Codable, understanding the underlying principles and techniques can be valuable. We will leverage the power of SwiftParsec, which offers a GenericTokenParser type that simplifies the creation of tokenizers. By following this tutorial, you will gain insights into how JSON parsing works and enhance your understanding of parsing techniques in Swift. It’s worth noting that for most use cases, you can rely on Swift’s Codable protocol for JSON parsing. However, building a JSON parser from scratch allows us to dive deeper into the inner workings and principles of parsing in Swift. So let’s get started and build our own JSON parser!"}],"identifier":"doc:\/\/SwiftParsec\/tutorials\/SwiftParsec\/JSONParser#Digging-Deeper","kind":"section","type":"section","url":"\/tutorials\/swiftparsec\/jsonparser#Digging-Deeper"},"json-8.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        let jstring = JSONValue.JString <^> stringLiteral","","        let jnumber = JSONValue.JNumber <^>","        (lexer.float.attempt <|> lexer.integerAsFloat)","","        let trueValue = symbol(\"true\") *> GenericParser(result: true)","        let falseValue = symbol(\"false\") *> GenericParser(result: false)","        let jbool = JSONValue.JBool <^> (trueValue <|> falseValue)","","        let jnull = symbol(\"null\") *> GenericParser(result: JSONValue.JNull)","","        var jarray: GenericParser<String, (), JSONValue>!","        var jobject: GenericParser<String, (), JSONValue>!","","        GenericParser.recursive { (jvalue: GenericParser<String, (), JSONValue>) in","            let jarrayValues = lexer.commaSeparated(jvalue)","            jarray = JSONValue.JArray <^> lexer.brackets(jarrayValues)","            \/\/ Rest of the code...","        }","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-8.swift","type":"file","fileType":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40}]},"json-1.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-1.swift","type":"file","fileType":"swift","highlights":[]},"json-2.swift":{"syntax":"swift","content":["import SwiftParsec","","public enum JSONValue {","","    case JString(String)","    case JNumber(Double)","    case JBool(Bool)","    case JNull","    case JArray([JSONValue])","    case JObject([String: JSONValue])","    case Error","","    public static let parser: GenericParser<String, (), JSONValue> = {","","        let json = LanguageDefinition<()>.json","        let lexer = GenericTokenParser(languageDefinition: json)","","        let symbol = lexer.symbol","        let stringLiteral = lexer.stringLiteral","","        \/\/ Rest of the code...","","    }()","","    \/\/ Rest of the code...","","}"],"fileName":"JSONParser.swift","identifier":"json-2.swift","type":"file","fileType":"swift","highlights":[{"line":18},{"line":19},{"line":20}]}}}