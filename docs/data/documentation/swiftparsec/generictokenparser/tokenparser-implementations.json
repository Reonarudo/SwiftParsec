{"variants":[{"paths":["\/documentation\/swiftparsec\/generictokenparser\/tokenparser-implementations"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"identifier":{"url":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/TokenParser-Implementations","interfaceLanguage":"swift"},"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/characterLiteral","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/colon","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/comma","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/dot","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/float","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/identifier","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/integer","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/integerAsFloat","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/legalOperator","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/natural","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/number","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/semicolon","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/stringLiteral","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/whiteSpace"],"generated":true},{"title":"Instance Methods","identifiers":["doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/angles(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/braces(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/brackets(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/commaSeparated(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/commaSeparated1(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/lexeme(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/parentheses(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/reservedName(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/reservedOperator(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/semicolonSeparated(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/semicolonSeparated1(_:)","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/symbol(_:)"],"generated":true},{"title":"Type Properties","identifiers":["doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/decimal","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/hexadecimal","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/octal"],"generated":true}],"kind":"article","metadata":{"modules":[{"name":"SwiftParsec"}],"role":"collectionGroup","title":"TokenParser Implementations"},"hierarchy":{"paths":[["doc:\/\/SwiftParsec\/documentation\/SwiftParsec","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser"]]},"references":{"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/colon":{"role":"symbol","title":"colon","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"colon"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"colon"},{"type":"text","text":" parses the character “:” and skips any trailing"},{"type":"text","text":" "},{"type":"text","text":"white space. Returns the string “:”."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/colon","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/colon"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/decimal":{"role":"symbol","title":"decimal","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"decimal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Parses a positive whole number in the decimal system. Returns the value"},{"type":"text","text":" "},{"type":"text","text":"of the number."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/decimal","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/decimal"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/octal":{"role":"symbol","title":"octal","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"octal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Parses a positive whole number in the octal system. The number should be"},{"type":"text","text":" "},{"type":"text","text":"prefixed with “o” or “O”. Returns the value of the number."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/octal","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/octal"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/dot":{"role":"symbol","title":"dot","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"dot"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"dot"},{"type":"text","text":" parses the character “.” and skips any trailing"},{"type":"text","text":" "},{"type":"text","text":"white space. Returns the string “.”."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/dot","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/dot"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/integerAsFloat":{"role":"symbol","title":"integerAsFloat","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"integerAsFloat"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses an integer (a whole number). It is like"},{"type":"text","text":" "},{"type":"codeVoice","code":"integer"},{"type":"text","text":" except that it can parse bigger numbers. Returns the value of"},{"type":"text","text":" "},{"type":"text","text":"the number as a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/integerAsFloat","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/integerasfloat"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/symbol(_:)":{"role":"symbol","title":"symbol(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"symbol"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"symbol(str)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"str"},{"type":"text","text":" and skips trailing white space."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/symbol(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/symbol(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/semicolon":{"role":"symbol","title":"semicolon","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"semicolon"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"semicolon"},{"type":"text","text":" parses the character “;” and skips any"},{"type":"text","text":" "},{"type":"text","text":"trailing white space. Returns the string “;”."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/semicolon","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/semicolon"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/legalOperator":{"role":"symbol","title":"legalOperator","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"legalOperator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses a legal operator and returns the name of the"},{"type":"text","text":" "},{"type":"text","text":"operator. This parser will fail on any operators that are reserved"},{"type":"text","text":" "},{"type":"text","text":"operators. Legal operator (start) characters and reserved operators are"},{"type":"text","text":" "},{"type":"text","text":"defined in the "},{"type":"codeVoice","code":"LanguageDefinition"},{"type":"text","text":" that is passed to the initializer of"},{"type":"text","text":" "},{"type":"text","text":"this token parser. An ‘operator’ is treated as a single token using"},{"type":"text","text":" "},{"type":"codeVoice","code":"GenericParser.attempt"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/legalOperator","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/legaloperator"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/natural":{"role":"symbol","title":"natural","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"natural"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses a natural number (a positive whole number) and"},{"type":"text","text":" "},{"type":"text","text":"returns the value of the number. The number can be specified in"},{"type":"text","text":" "},{"type":"text","text":"‘decimal’, ‘hexadecimal’ or ‘octal’."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/natural","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/natural"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/commaSeparated(_:)":{"role":"symbol","title":"commaSeparated(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"commaSeparated"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ["},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"commaSeparated(parser)"},{"type":"text","text":" parses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"zero"}]},{"type":"text","text":" or more occurrences"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" separated by "},{"type":"codeVoice","code":"comma"},{"type":"text","text":". Returns an array of values returned by"},{"type":"text","text":" "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/commaSeparated(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/commaseparated(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/commaSeparated1(_:)":{"role":"symbol","title":"commaSeparated1(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"commaSeparated1"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ["},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"commaSeparated1(parser)"},{"type":"text","text":" parses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one"}]},{"type":"text","text":" or more occurrences"},{"type":"text","text":" "},{"type":"text","text":"of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" separated by "},{"type":"codeVoice","code":"comma"},{"type":"text","text":". Returns an array of values returned by"},{"type":"text","text":" "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/commaSeparated1(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/commaseparated1(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/semicolonSeparated(_:)":{"role":"symbol","title":"semicolonSeparated(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"semicolonSeparated"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ["},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"semicolonSeperated(parser)"},{"type":"text","text":" parses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"zero"}]},{"type":"text","text":" or more"},{"type":"text","text":" "},{"type":"text","text":"occurrences of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" separated by "},{"type":"codeVoice","code":"semicolon"},{"type":"text","text":". Returns an array of"},{"type":"text","text":" "},{"type":"text","text":"values returned by "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/semicolonSeparated(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/semicolonseparated(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser":{"role":"symbol","title":"GenericTokenParser","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericTokenParser"}],"abstract":[{"type":"text","text":"Generic implementation of the "},{"type":"codeVoice","code":"TokenParser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"GenericTokenParser"}],"url":"\/documentation\/swiftparsec\/generictokenparser"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/float":{"role":"symbol","title":"float","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"float"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses a floating point value and returns the value"},{"type":"text","text":" "},{"type":"text","text":"of the number."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/float","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/float"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/reservedName(_:)":{"role":"symbol","title":"reservedName(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reservedName"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ()>"}],"abstract":[{"type":"text","text":"The lexeme parser "},{"type":"codeVoice","code":"reservedName(name)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"symbol(name)"},{"type":"text","text":", but it"},{"type":"text","text":" "},{"type":"text","text":"also checks that the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" is not a prefix of a valid identifier. A"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"reserved"}]},{"type":"text","text":" word is treated as a single token using"},{"type":"text","text":" "},{"type":"codeVoice","code":"GenericParser.attempt"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/reservedName(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/reservedname(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/parentheses(_:)":{"role":"symbol","title":"parentheses(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parentheses"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"parentheses(parser)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" enclosed in"},{"type":"text","text":" "},{"type":"text","text":"parentheses, returning the value of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/parentheses(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/parentheses(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/braces(_:)":{"role":"symbol","title":"braces(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"braces"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"braces(parser)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" enclosed in braces “{”"},{"type":"text","text":" "},{"type":"text","text":"and “}”, returning the value of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/braces(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/braces(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/lexeme(_:)":{"role":"symbol","title":"lexeme(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"lexeme"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"codeVoice","code":"lexeme(parser)"},{"type":"text","text":" first applies "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" and than the "},{"type":"codeVoice","code":"whiteSpace"},{"type":"text","text":" "},{"type":"text","text":"parser, returning the value of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":". Every lexical token (lexeme) is"},{"type":"text","text":" "},{"type":"text","text":"defined using "},{"type":"codeVoice","code":"lexeme"},{"type":"text","text":", this way every parse starts at a point without"},{"type":"text","text":" "},{"type":"text","text":"white space. Parsers that use "},{"type":"codeVoice","code":"lexeme"},{"type":"text","text":" are called "},{"type":"emphasis","inlineContent":[{"type":"text","text":"lexeme"}]},{"type":"text","text":" parsers in"},{"type":"text","text":" "},{"type":"text","text":"this document."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/lexeme(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/lexeme(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/whiteSpace":{"role":"symbol","title":"whiteSpace","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"whiteSpace"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ()>"}],"abstract":[{"type":"text","text":"Parses any white space. White space consists of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"zero"}]},{"type":"text","text":" or more"},{"type":"text","text":" "},{"type":"text","text":"occurrences of a ‘space’, a line comment or a block (multiline) comment."},{"type":"text","text":" "},{"type":"text","text":"Block comments may be nested. How comments are started and ended is"},{"type":"text","text":" "},{"type":"text","text":"defined in the "},{"type":"codeVoice","code":"LanguageDefinition"},{"type":"text","text":" that is passed to the initializer of"},{"type":"text","text":" "},{"type":"text","text":"this token parser."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/whiteSpace","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/whitespace"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/integer":{"role":"symbol","title":"integer","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"integer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses an integer (a whole number). This parser is"},{"type":"text","text":" "},{"type":"text","text":"like "},{"type":"codeVoice","code":"natural"},{"type":"text","text":" except that it can be prefixed with sign (i.e. “-” or"},{"type":"text","text":" "},{"type":"text","text":"“+”). It returns the value of the number. The number can be specified in"},{"type":"text","text":" "},{"type":"text","text":"‘decimal’, ‘hexadecimal’ or ‘octal’."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/integer","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/integer"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/semicolonSeparated1(_:)":{"role":"symbol","title":"semicolonSeparated1(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"semicolonSeparated1"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ["},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"]>"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"semicolonSeperated1(parser)"},{"type":"text","text":" parses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"one"}]},{"type":"text","text":" or more"},{"type":"text","text":" "},{"type":"text","text":"occurrences of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" separated by "},{"type":"codeVoice","code":"semicolon"},{"type":"text","text":". Returns an array of"},{"type":"text","text":" "},{"type":"text","text":"values returned by "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/semicolonSeparated1(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/semicolonseparated1(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/characterLiteral":{"role":"symbol","title":"characterLiteral","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"characterLiteral"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Character","preciseIdentifier":"s:SJ"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses a single literal character and returns the"},{"type":"text","text":" "},{"type":"text","text":"literal character value. This parser deals correctly with escape"},{"type":"text","text":" "},{"type":"text","text":"sequences."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/characterLiteral","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/characterliteral"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/comma":{"role":"symbol","title":"comma","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"comma"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"comma"},{"type":"text","text":" parses the character “,” and skips any trailing"},{"type":"text","text":" "},{"type":"text","text":"white space. Returns the string “,”."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/comma","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/comma"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/reservedOperator(_:)":{"role":"symbol","title":"reservedOperator(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"reservedOperator"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ()>"}],"abstract":[{"type":"text","text":"The lexeme parser "},{"type":"codeVoice","code":"reservedOperator(name)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"symbol(name)"},{"type":"text","text":", but it"},{"type":"text","text":" "},{"type":"text","text":"also checks that the "},{"type":"codeVoice","code":"name"},{"type":"text","text":" is not a prefix of a valid operator. A"},{"type":"text","text":" "},{"type":"text","text":"‘reservedOperator’ is treated as a single token using"},{"type":"text","text":" "},{"type":"codeVoice","code":"GenericParser.attempt"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/reservedOperator(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/reservedoperator(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/angles(_:)":{"role":"symbol","title":"angles(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"angles"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"angles(parser)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" enclosed in angle"},{"type":"text","text":" "},{"type":"text","text":"brackets “<” and “>”, returning the value of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/angles(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/angles(_:)"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/brackets(_:)":{"role":"symbol","title":"brackets(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"brackets"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Result"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lexeme parser "},{"type":"codeVoice","code":"brackets(parser)"},{"type":"text","text":" parses "},{"type":"codeVoice","code":"parser"},{"type":"text","text":" enclosed in brackets"},{"type":"text","text":" "},{"type":"text","text":"“[” and “]”, returning the value of "},{"type":"codeVoice","code":"parser"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/brackets(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/brackets(_:)"},"doc://SwiftParsec/documentation/SwiftParsec":{"role":"collection","title":"SwiftParsec","abstract":[],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/stringLiteral":{"role":"symbol","title":"stringLiteral","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"stringLiteral"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses a literal string and returns the literal"},{"type":"text","text":" "},{"type":"text","text":"string value. This parser deals correctly with escape sequences and"},{"type":"text","text":" "},{"type":"text","text":"gaps."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/stringLiteral","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/stringliteral"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/identifier":{"role":"symbol","title":"identifier","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This lexeme parser parses a legal identifier. Returns the identifier"},{"type":"text","text":" "},{"type":"text","text":"string. This parser will fail on identifiers that are reserved words."},{"type":"text","text":" "},{"type":"text","text":"Legal identifier (start) characters and reserved words are defined in"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"LanguageDefinition"},{"type":"text","text":" that is passed to the initializer of this token"},{"type":"text","text":" "},{"type":"text","text":"parser. An "},{"type":"codeVoice","code":"identifier"},{"type":"text","text":" is treated as a single token using"},{"type":"text","text":" "},{"type":"codeVoice","code":"GenericParser.attempt"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/identifier","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/identifier"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/number":{"role":"symbol","title":"number","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"number"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Either","preciseIdentifier":"s:11SwiftParsec6EitherO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Double","preciseIdentifier":"s:Sd"},{"kind":"text","text":">>"}],"abstract":[{"type":"text","text":"This lexeme parser parses either "},{"type":"codeVoice","code":"integer"},{"type":"text","text":" or a "},{"type":"codeVoice","code":"float"},{"type":"text","text":" and returns the"},{"type":"text","text":" "},{"type":"text","text":"value of the number. This parser deals with any overlap in the grammar"},{"type":"text","text":" "},{"type":"text","text":"rules for integers and floats."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/number","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/number"},"doc://SwiftParsec/documentation/SwiftParsec/GenericTokenParser/hexadecimal":{"role":"symbol","title":"hexadecimal","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"hexadecimal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Parses a positive whole number in the hexadecimal system. The number"},{"type":"text","text":" "},{"type":"text","text":"should be prefixed with “x” or “X”. Returns the value of the number."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericTokenParser\/hexadecimal","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/generictokenparser\/hexadecimal"}}}