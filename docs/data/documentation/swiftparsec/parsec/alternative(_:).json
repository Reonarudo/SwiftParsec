{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alternative"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"altParser"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"altParser","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The alternative parser to try if "},{"type":"codeVoice","code":"self"},{"type":"text","text":" fails."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that will first try "},{"type":"codeVoice","code":"self"},{"type":"text","text":". If it consumed no input,"},{"type":"text","text":" "},{"type":"text","text":"it will try "},{"type":"codeVoice","code":"altParser"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method has the synonym infix operator "},{"type":"codeVoice","code":"<|>"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftparsec\/parsec\/alternative(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/Parsec\/alternative(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This combinator implements choice. The parser "},{"type":"codeVoice","code":"p.alternative(q)"},{"type":"text","text":" first"},{"type":"text","text":" "},{"type":"text","text":"applies "},{"type":"codeVoice","code":"p"},{"type":"text","text":". If it succeeds, the value of "},{"type":"codeVoice","code":"p"},{"type":"text","text":" is returned. If "},{"type":"codeVoice","code":"p"},{"type":"text","text":" fails"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"without consuming any input"}]},{"type":"text","text":", parser "},{"type":"codeVoice","code":"q"},{"type":"text","text":" is tried. The parser is called"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"predictive"}]},{"type":"text","text":" since "},{"type":"codeVoice","code":"q"},{"type":"text","text":" is only tried when parser "},{"type":"codeVoice","code":"p"},{"type":"text","text":" didn’t consume any"},{"type":"text","text":" "},{"type":"text","text":"input (i.e.. the look ahead is 1). This non-backtracking behaviour"},{"type":"text","text":" "},{"type":"text","text":"allows for both an efficient implementation of the parser combinators"},{"type":"text","text":" "},{"type":"text","text":"and the generation of good error messages."}],"kind":"symbol","metadata":{"role":"symbol","title":"alternative(_:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alternative"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"symbolKind":"method","externalID":"s:11SwiftParsec0B0P11alternativeyxxF","required":true,"modules":[{"name":"SwiftParsec"}]},"hierarchy":{"paths":[["doc:\/\/SwiftParsec\/documentation\/SwiftParsec","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/Parsec"]]},"references":{"doc://SwiftParsec/documentation/SwiftParsec/Parsec":{"role":"symbol","title":"Parsec","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsec"}],"abstract":[{"type":"codeVoice","code":"Parsec"},{"type":"text","text":" is a parser with stream type "},{"type":"codeVoice","code":"Stream"},{"type":"text","text":", user state type "},{"type":"codeVoice","code":"UserState"},{"type":"text","text":" "},{"type":"text","text":"and return type "},{"type":"codeVoice","code":"Result"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/Parsec","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parsec"}],"url":"\/documentation\/swiftparsec\/parsec"},"doc://SwiftParsec/documentation/SwiftParsec":{"role":"collection","title":"SwiftParsec","abstract":[{"type":"text","text":"Unleash the Power of Parser Combinators in Swift!"}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec"},"doc://SwiftParsec/documentation/SwiftParsec/Parsec/alternative(_:)":{"role":"symbol","title":"alternative(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"alternative"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"abstract":[{"type":"text","text":"This combinator implements choice. The parser "},{"type":"codeVoice","code":"p.alternative(q)"},{"type":"text","text":" first"},{"type":"text","text":" "},{"type":"text","text":"applies "},{"type":"codeVoice","code":"p"},{"type":"text","text":". If it succeeds, the value of "},{"type":"codeVoice","code":"p"},{"type":"text","text":" is returned. If "},{"type":"codeVoice","code":"p"},{"type":"text","text":" fails"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"without consuming any input"}]},{"type":"text","text":", parser "},{"type":"codeVoice","code":"q"},{"type":"text","text":" is tried. The parser is called"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"predictive"}]},{"type":"text","text":" since "},{"type":"codeVoice","code":"q"},{"type":"text","text":" is only tried when parser "},{"type":"codeVoice","code":"p"},{"type":"text","text":" didn’t consume any"},{"type":"text","text":" "},{"type":"text","text":"input (i.e.. the look ahead is 1). This non-backtracking behaviour"},{"type":"text","text":" "},{"type":"text","text":"allows for both an efficient implementation of the parser combinators"},{"type":"text","text":" "},{"type":"text","text":"and the generation of good error messages."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/Parsec\/alternative(_:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/swiftparsec\/parsec\/alternative(_:)"}}}