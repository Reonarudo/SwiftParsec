{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeExpressionParser"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"combine"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC","text":"GenericParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC","text":"GenericParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC","text":"GenericParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"combine","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function receiving a ‘simple expression’ as"},{"type":"text","text":" "},{"type":"text","text":"parameter that can be nested in other expressions."}]}]},{"name":"expression","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that can be combined with other expressions."}]}]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An expression parser for terms returned by "},{"type":"codeVoice","code":"combined"},{"type":"text","text":" "},{"type":"text","text":"with operators from "},{"type":"codeVoice","code":"self"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It takes care of all the complexity involved in building expression"},{"type":"text","text":" "},{"type":"text","text":"parser. Here is an example of an expression parser that handles prefix"},{"type":"text","text":" "},{"type":"text","text":"signs, postfix increment and basic arithmetic:"}]},{"type":"codeListing","syntax":null,"code":["func binary(","    name: String,","    function: (Int, Int) -> Int,","    assoc: Associativity",") -> Operator<String, (), Int> {","","    let opParser = StringParser.string(name) *>","        GenericParser(result: function)","","    return .Infix(opParser, assoc)","","}","","func prefix(","    name: String,","    function: Int -> Int",") -> Operator<String, (), Int> {","","    let opParser = StringParser.string(name) *>","        GenericParser(result: function)","","    return .Prefix(opParser)","","}","","func postfix(","    name: String,","    function: Int -> Int",") -> Operator<String, (), Int> {","","    let opParser = StringParser.string(name) *>","        GenericParser(result: function)","","    return .Postfix(opParser.attempt)","","}","","let opTable: OperatorTable<String, (), Int> = [","","    [","        prefix(\"-\", function: -),","        prefix(\"+\", function: { $0 })","    ],","    [","        binary(\"^\", function: power, assoc: .right)","    ],","    [","        binary(\"*\", function: *, assoc: .left),","        binary(\"\/\", function: \/, assoc: .left)","    ],","    [","        binary(\"+\", function: +, assoc: .left),","        binary(\"-\", function: -, assoc: .left)","    ]","","]","","let openingParen = StringParser.character(\"(\")","let closingParen = StringParser.character(\")\")","let decimal = GenericTokenParser<()>.decimal","","let expression = opTable.makeExpressionParser { expression in","","    expression.between(openingParen, closingParen) <|>","        decimal <?> \"simple expression\"","","} <?> \"expression\""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftparsec\/operatortable\/makeexpressionparser(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/OperatorTable\/makeExpressionParser(_:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Build an expression parser for terms returned by "},{"type":"codeVoice","code":"combined"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"operators from "},{"type":"codeVoice","code":"self"},{"type":"text","text":", taking the associativity and precedence specified"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"codeVoice","code":"self"},{"type":"text","text":" into account. Prefix and postfix operators of the same"},{"type":"text","text":" "},{"type":"text","text":"precedence can only occur once (i.e. "},{"type":"codeVoice","code":"--2"},{"type":"text","text":" is not allowed if "},{"type":"codeVoice","code":"-"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"prefix negate). Prefix and postfix operators of the same precedence"},{"type":"text","text":" "},{"type":"text","text":"associate to the left (i.e. if "},{"type":"codeVoice","code":"++"},{"type":"text","text":" is postfix increment, than "},{"type":"codeVoice","code":"-2++"},{"type":"text","text":" "},{"type":"text","text":"equals "},{"type":"codeVoice","code":"-1"},{"type":"text","text":", not "},{"type":"codeVoice","code":"-3"},{"type":"text","text":")."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeExpressionParser"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"title":"makeExpressionParser(_:)","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","externalID":"s:11SwiftParsec13OperatorTableV20makeExpressionParseryAA07GenericG0Cyxq_q0_GA2GXEF","modules":[{"name":"SwiftParsec"}]},"hierarchy":{"paths":[["doc:\/\/SwiftParsec\/documentation\/SwiftParsec","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/OperatorTable"]]},"references":{"doc://SwiftParsec/documentation/SwiftParsec/OperatorTable":{"role":"symbol","title":"OperatorTable","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OperatorTable"}],"abstract":[{"type":"text","text":"Represents a table of  operators. The "},{"type":"codeVoice","code":"makeExpressionParser()"},{"type":"text","text":" method is"},{"type":"text","text":" "},{"type":"text","text":"used to create parsers based on the table."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/OperatorTable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OperatorTable"}],"url":"\/documentation\/swiftparsec\/operatortable"},"doc://SwiftParsec/documentation/SwiftParsec":{"role":"collection","title":"SwiftParsec","abstract":[{"type":"text","text":"Unleash the Power of Parser Combinators in Swift!"}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec"},"doc://SwiftParsec/documentation/SwiftParsec/GenericParser":{"role":"symbol","title":"GenericParser","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericParser"}],"abstract":[{"type":"codeVoice","code":"GenericParser"},{"type":"text","text":" is a generic implementation of the "},{"type":"codeVoice","code":"Parsec"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"GenericParser"}],"url":"\/documentation\/swiftparsec\/genericparser"},"doc://SwiftParsec/documentation/SwiftParsec/OperatorTable/makeExpressionParser(_:)":{"role":"symbol","title":"makeExpressionParser(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"makeExpressionParser"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Build an expression parser for terms returned by "},{"type":"codeVoice","code":"combined"},{"type":"text","text":" with"},{"type":"text","text":" "},{"type":"text","text":"operators from "},{"type":"codeVoice","code":"self"},{"type":"text","text":", taking the associativity and precedence specified"},{"type":"text","text":" "},{"type":"text","text":"in "},{"type":"codeVoice","code":"self"},{"type":"text","text":" into account. Prefix and postfix operators of the same"},{"type":"text","text":" "},{"type":"text","text":"precedence can only occur once (i.e. "},{"type":"codeVoice","code":"--2"},{"type":"text","text":" is not allowed if "},{"type":"codeVoice","code":"-"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"prefix negate). Prefix and postfix operators of the same precedence"},{"type":"text","text":" "},{"type":"text","text":"associate to the left (i.e. if "},{"type":"codeVoice","code":"++"},{"type":"text","text":" is postfix increment, than "},{"type":"codeVoice","code":"-2++"},{"type":"text","text":" "},{"type":"text","text":"equals "},{"type":"codeVoice","code":"-1"},{"type":"text","text":", not "},{"type":"codeVoice","code":"-3"},{"type":"text","text":")."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/OperatorTable\/makeExpressionParser(_:)","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/operatortable\/makeexpressionparser(_:)"}}}