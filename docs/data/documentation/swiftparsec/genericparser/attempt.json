{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"attempt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC","text":"GenericParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A parser that pretends that it hasn’t consumed any input when"},{"type":"text","text":" "},{"type":"codeVoice","code":"self"},{"type":"text","text":" fails."}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"attempt"},{"type":"text","text":" combinator can for example be used to distinguish"},{"type":"text","text":" "},{"type":"text","text":"identifiers and reserved words. Both reserved words and identifiers are"},{"type":"text","text":" "},{"type":"text","text":"a sequence of letters. Whenever we expect a certain reserved word where"},{"type":"text","text":" "},{"type":"text","text":"we can also expect an identifier we have to use the "},{"type":"codeVoice","code":"attempt"},{"type":"text","text":" "},{"type":"text","text":"combinator. Suppose we write:"}]},{"type":"codeListing","syntax":null,"code":["let letExpr = StringParser.string(\"let\")","let identifier = letter.many1","","let expr = letExpr <|> identifier <?> \"expression\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the user writes \"lexical\", the parser fails with: "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unexpected ‘x’,"},{"type":"text","text":" "},{"type":"text","text":"expecting ‘t’ in “let”"}]},{"type":"text","text":". Indeed, since the (’<|>’) combinator only tries"},{"type":"text","text":" "},{"type":"text","text":"alternatives when the first alternative hasn’t consumed input, the"},{"type":"text","text":" "},{"type":"codeVoice","code":"identifier"},{"type":"text","text":" parser is never tried (because the prefix “le” of the"},{"type":"text","text":" "},{"type":"codeVoice","code":"string(\"let\")"},{"type":"text","text":" parser is already consumed). The right behaviour can be"},{"type":"text","text":" "},{"type":"text","text":"obtained by adding the "},{"type":"codeVoice","code":"attempt"},{"type":"text","text":" combinator:"}]},{"type":"codeListing","syntax":null,"code":["let letExpr = StringParser.string(\"let\")","let identifier = StringParser.letter.many1","","let expr = letExpr.attempt <|> identifier <?> \"expression\""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftparsec\/genericparser\/attempt"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser\/attempt","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This combinator is used whenever arbitrary look ahead is needed. Since"},{"type":"text","text":" "},{"type":"text","text":"it pretends that it hasn’t consumed any input when "},{"type":"codeVoice","code":"self"},{"type":"text","text":" fails, the"},{"type":"text","text":" "},{"type":"text","text":"(’<|>’) combinator will try its second alternative even when the first"},{"type":"text","text":" "},{"type":"text","text":"parser failed while consuming input."}],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"attempt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"title":"attempt","roleHeading":"Instance Property","role":"symbol","symbolKind":"property","externalID":"s:11SwiftParsec13GenericParserC7attemptACyxq_q0_Gvp","modules":[{"name":"SwiftParsec"}]},"hierarchy":{"paths":[["doc:\/\/SwiftParsec\/documentation\/SwiftParsec","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser"]]},"references":{"doc://SwiftParsec/documentation/SwiftParsec/GenericParser/attempt":{"role":"symbol","title":"attempt","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"attempt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Result"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"This combinator is used whenever arbitrary look ahead is needed. Since"},{"type":"text","text":" "},{"type":"text","text":"it pretends that it hasn’t consumed any input when "},{"type":"codeVoice","code":"self"},{"type":"text","text":" fails, the"},{"type":"text","text":" "},{"type":"text","text":"(’<|>’) combinator will try its second alternative even when the first"},{"type":"text","text":" "},{"type":"text","text":"parser failed while consuming input."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser\/attempt","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/genericparser\/attempt"},"doc://SwiftParsec/documentation/SwiftParsec/GenericParser":{"role":"symbol","title":"GenericParser","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericParser"}],"abstract":[{"type":"codeVoice","code":"GenericParser"},{"type":"text","text":" is a generic implementation of the "},{"type":"codeVoice","code":"Parsec"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"GenericParser"}],"url":"\/documentation\/swiftparsec\/genericparser"},"doc://SwiftParsec/documentation/SwiftParsec":{"role":"collection","title":"SwiftParsec","abstract":[{"type":"text","text":"Unleash the Power of Parser Combinators in Swift!"}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec"}}}