{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"noOccurence"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC","text":"GenericParser"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ()> { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"codeListing","syntax":null,"code":["let alphaNum = StringParser.alphaNumeric","let keyworkLet = StringParser.string(\"let\") <* alphaNum.noOccurence"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/swiftparsec\/genericparser\/nooccurence"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser\/noOccurence","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A parser that only succeeds when parser "},{"type":"codeVoice","code":"self"},{"type":"text","text":" fails. This parser does"},{"type":"text","text":" "},{"type":"text","text":"not consume any input. This parser can be used to implement the"},{"type":"text","text":" "},{"type":"text","text":"‘longest match’ rule. For example, when recognizing keywords (for"},{"type":"text","text":" "},{"type":"text","text":"example "},{"type":"codeVoice","code":"let"},{"type":"text","text":"), we want to make sure that a keyword is not followed by a"},{"type":"text","text":" "},{"type":"text","text":"legal identifier character, in which case the keyword is actually an"},{"type":"text","text":" "},{"type":"text","text":"identifier (for example "},{"type":"codeVoice","code":"lets"},{"type":"text","text":"). We can program this behaviour as"},{"type":"text","text":" "},{"type":"text","text":"follows:"}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"StreamType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Stream"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"noOccurence","roleHeading":"Instance Property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"noOccurence"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ()>"}],"symbolKind":"property","externalID":"s:11SwiftParsec13GenericParserC11noOccurenceACyxq_ytGvp","extendedModule":"SwiftParsec","modules":[{"name":"SwiftParsec"}]},"hierarchy":{"paths":[["doc:\/\/SwiftParsec\/documentation\/SwiftParsec","doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser"]]},"references":{"doc://SwiftParsec/documentation/SwiftParsec/GenericParser":{"role":"symbol","title":"GenericParser","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenericParser"}],"abstract":[{"type":"codeVoice","code":"GenericParser"},{"type":"text","text":" is a generic implementation of the "},{"type":"codeVoice","code":"Parsec"},{"type":"text","text":"."}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"GenericParser"}],"url":"\/documentation\/swiftparsec\/genericparser"},"doc://SwiftParsec/documentation/SwiftParsec":{"role":"collection","title":"SwiftParsec","abstract":[],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec"},"doc://SwiftParsec/documentation/SwiftParsec/GenericParser/noOccurence":{"conformance":{"constraints":[{"type":"codeVoice","code":"StreamType"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Stream"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"noOccurence","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"noOccurence"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"GenericParser","preciseIdentifier":"s:11SwiftParsec13GenericParserC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"StreamType"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"UserState"},{"kind":"text","text":", ()>"}],"abstract":[{"type":"text","text":"A parser that only succeeds when parser "},{"type":"codeVoice","code":"self"},{"type":"text","text":" fails. This parser does"},{"type":"text","text":" "},{"type":"text","text":"not consume any input. This parser can be used to implement the"},{"type":"text","text":" "},{"type":"text","text":"‘longest match’ rule. For example, when recognizing keywords (for"},{"type":"text","text":" "},{"type":"text","text":"example "},{"type":"codeVoice","code":"let"},{"type":"text","text":"), we want to make sure that a keyword is not followed by a"},{"type":"text","text":" "},{"type":"text","text":"legal identifier character, in which case the keyword is actually an"},{"type":"text","text":" "},{"type":"text","text":"identifier (for example "},{"type":"codeVoice","code":"lets"},{"type":"text","text":"). We can program this behaviour as"},{"type":"text","text":" "},{"type":"text","text":"follows:"}],"identifier":"doc:\/\/SwiftParsec\/documentation\/SwiftParsec\/GenericParser\/noOccurence","kind":"symbol","type":"topic","url":"\/documentation\/swiftparsec\/genericparser\/nooccurence"}}}