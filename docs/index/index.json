{"interfaceLanguages":{"swift":[{"children":[{"title":"Building a CSV Parser with SwiftParsec","type":"groupMarker"},{"path":"\/tutorials\/swiftparsec\/csvparser","title":"Building a CSV Parser with SwiftParsec","type":"project"},{"title":"Building a JSON Parser with SwiftParsec","type":"groupMarker"},{"path":"\/tutorials\/swiftparsec\/jsonparser","title":"Building a JSON Parser with SwiftParsec","type":"project"}],"path":"\/tutorials\/table-of-contents","title":"Introduction to SwiftParsec","type":"overview"},{"children":[{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/advanced-topics-with-swiftparsec-1","title":"Advanced Topics with SwiftParsec","type":"article"},{"path":"\/documentation\/swiftparsec\/advanced-topics-with-swiftparsec-2","title":"Advanced Topics with SwiftParsec (part 2)","type":"article"},{"path":"\/documentation\/swiftparsec\/getting-started-with-swiftparsec","title":"Getting Started with SwiftParsec","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/init(function:)","title":"init(function: () -> GenericParser<StreamType, UserState, Result>)","type":"init"},{"path":"\/documentation\/swiftparsec\/genericparser\/init(result:)","title":"init(result: Result)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/attempt","title":"var attempt: GenericParser<StreamType, UserState, Result>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/discard","title":"var discard: GenericParser<StreamType, UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/lookahead","title":"var lookAhead: GenericParser<StreamType, UserState, Result>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/many","title":"var many: GenericParser<StreamType, UserState, [Result]>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/many1","title":"var many1: GenericParser<StreamType, UserState, [Result]>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/nooccurence","title":"var noOccurence: GenericParser<StreamType, UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/optional","title":"var optional: GenericParser<StreamType, UserState, Result?>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/skipmany","title":"var skipMany: GenericParser<StreamType, UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/skipmany1","title":"var skipMany1: GenericParser<StreamType, UserState, ()>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/alternative(_:)","title":"func alternative(GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/apply(_:)","title":"func apply<T>(GenericParser<StreamType, UserState, (Result) -> T>) -> GenericParser<StreamType, UserState, T>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/between(_:_:)","title":"func between<U, V>(GenericParser<StreamType, UserState, U>, GenericParser<StreamType, UserState, V>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/chainleft(_:otherwise:)","title":"func chainLeft(GenericParser<StreamType, UserState, (Result, Result) -> Result>, otherwise: Result) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/chainleft1(_:)","title":"func chainLeft1(GenericParser<StreamType, UserState, (Result, Result) -> Result>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/chainright(_:otherwise:)","title":"func chainRight(GenericParser<StreamType, UserState, (Result, Result) -> Result>, otherwise: Result) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/chainright1(_:)","title":"func chainRight1(GenericParser<StreamType, UserState, (Result, Result) -> Result>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/count(_:)","title":"func count(Int) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/dividedby(_:endseparatorrequired:)","title":"func dividedBy<Separator>(GenericParser<StreamType, UserState, Separator>, endSeparatorRequired: Bool) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/dividedby1(_:endseparatorrequired:)","title":"func dividedBy1<Separator>(GenericParser<StreamType, UserState, Separator>, endSeparatorRequired: Bool) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/flatmap(_:)","title":"func flatMap<T>((Result) -> GenericParser<StreamType, UserState, T>) -> GenericParser<StreamType, UserState, T>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/labels(_:)","title":"func labels(String...) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/manyaccumulator(_:)","title":"func manyAccumulator<Accumulator>((Result, Accumulator) -> Accumulator) -> GenericParser<StreamType, UserState, Accumulator>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/manytill(_:)","title":"func manyTill<End>(GenericParser<StreamType, UserState, End>) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/map(_:)","title":"func map<T>((Result) -> T) -> GenericParser<StreamType, UserState, T>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/otherwise(_:)","title":"func otherwise(Result) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/runsafe(userstate:sourcename:input:)","title":"func runSafe(userState: UserState, sourceName: String, input: StreamType) -> Either<ParseError, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/separatedby(_:)","title":"func separatedBy<Separator>(GenericParser<StreamType, UserState, Separator>) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/separatedby1(_:)","title":"func separatedBy1<Separator>(GenericParser<StreamType, UserState, Separator>) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/empty","title":"static var empty: GenericParser<StreamType, UserState, Result>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/sourceposition","title":"static var sourcePosition: GenericParser<StreamType, UserState, SourcePosition>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/userstate","title":"static var userState: GenericParser<StreamType, UserState, UserState>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/choice(_:)","title":"static func choice<S>(S) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/fail(_:)","title":"static func fail(String) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/lift2(_:parser1:parser2:)","title":"static func lift2<Param1, Param2>((Param1, Param2) -> Result, parser1: GenericParser<StreamType, UserState, Param1>, parser2: GenericParser<StreamType, UserState, Param2>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/lift3(_:parser1:parser2:parser3:)","title":"static func lift3<Param1, Param2, Param3>((Param1, Param2, Param3) -> Result, parser1: GenericParser<StreamType, UserState, Param1>, parser2: GenericParser<StreamType, UserState, Param2>, parser3: GenericParser<StreamType, UserState, Param3>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/lift4(_:parser1:parser2:parser3:parser4:)","title":"static func lift4<Param1, Param2, Param3, Param4>((Param1, Param2, Param3, Param4) -> Result, parser1: GenericParser<StreamType, UserState, Param1>, parser2: GenericParser<StreamType, UserState, Param2>, parser3: GenericParser<StreamType, UserState, Param3>, parser4: GenericParser<StreamType, UserState, Param4>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/lift5(_:parser1:parser2:parser3:parser4:parser5:)","title":"static func lift5<Param1, Param2, Param3, Param4, Param5>((Param1, Param2, Param3, Param4, Param5) -> Result, parser1: GenericParser<StreamType, UserState, Param1>, parser2: GenericParser<StreamType, UserState, Param2>, parser3: GenericParser<StreamType, UserState, Param3>, parser4: GenericParser<StreamType, UserState, Param4>, parser5: GenericParser<StreamType, UserState, Param5>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/recursive(_:)","title":"static func recursive((GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/unexpected(_:)","title":"static func unexpected(String) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/updateuserstate(_:)","title":"static func updateUserState((UserState) -> UserState) -> GenericParser<StreamType, UserState, ()>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/___(_:_:)-mk5g","title":"static func <?> (Self, String) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/genericparser\/___(_:_:)-t050","title":"static func <|> (Self, Self) -> Self","type":"op"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/stringvalue","title":"var stringValue: GenericParser<Self.StreamType, Self.UserState, String>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/run(sourcename:input:)","title":"func run(sourceName: String, input: Self.StreamType) throws -> Self.Result","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/run(userstate:sourcename:input:)","title":"func run(userState: Self.UserState, sourceName: String, input: Self.StreamType) throws -> Self.Result","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/test(input:)","title":"func test(input: Self.StreamType)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/alphanumeric","title":"static var alphaNumeric: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/anycharacter","title":"static var anyCharacter: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/anytoken","title":"static var anyToken: GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/crlf","title":"static var crlf: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/decimaldigit","title":"static var decimalDigit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/digit","title":"static var digit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/endofline","title":"static var endOfLine: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/eof","title":"static var eof: GenericParser<Self.StreamType, Self.UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/hexadecimaldigit","title":"static var hexadecimalDigit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/letter","title":"static var letter: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/lowercase","title":"static var lowercase: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/newline","title":"static var newLine: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/octaldigit","title":"static var octalDigit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/space","title":"static var space: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/spaces","title":"static var spaces: GenericParser<Self.StreamType, Self.UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/symbol","title":"static var symbol: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/tab","title":"static var tab: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/unicodespace","title":"static var unicodeSpace: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/genericparser\/uppercase","title":"static var uppercase: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/genericparser\/character(_:)","title":"static func character(Character) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/memberof(_:)","title":"static func memberOf(CharacterSet) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/noneof(_:)","title":"static func noneOf(String) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/oneof(_:)-5n626","title":"static func oneOf(ClosedRange<Character>) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/oneof(_:)-6j248","title":"static func oneOf(String) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/satisfy(_:)","title":"static func satisfy((Character) -> Bool) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/string(_:)","title":"static func string(Self.StreamType) -> GenericParser<Self.StreamType, Self.UserState, Self.StreamType>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/tokenprimitive(tokendescription:nextposition:match:)","title":"static func tokenPrimitive(tokenDescription: (Self.StreamType.Iterator.Element) -> String, nextPosition: (SourcePosition, Self.StreamType.Iterator.Element) -> SourcePosition, match: (Self.StreamType.Iterator.Element) -> Self.Result?) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/genericparser\/tokens(tokensdescription:nextposition:tokens:)","title":"static func tokens(tokensDescription: (Self.StreamType) -> String, nextPosition: (SourcePosition, Self.StreamType) -> SourcePosition, tokens: Self.StreamType) -> GenericParser<Self.StreamType, Self.UserState, Self.StreamType>","type":"method"}],"path":"\/documentation\/swiftparsec\/genericparser\/parsec-implementations","title":"Parsec Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/genericparser","title":"GenericParser","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/emptyinitializable\/init()","title":"init()","type":"init"}],"path":"\/documentation\/swiftparsec\/emptyinitializable","title":"EmptyInitializable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parsec\/___(_:_:)-1fh1i","title":"static func <|> (Self, Self) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/parsec\/___(_:_:)-75yok","title":"static func <?> (Self, String) -> Self","type":"op"},{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parsec\/result","title":"Result","type":"associatedtype"},{"path":"\/documentation\/swiftparsec\/parsec\/streamtype","title":"StreamType","type":"associatedtype"},{"path":"\/documentation\/swiftparsec\/parsec\/userstate-swift.associatedtype","title":"UserState","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parsec\/attempt","title":"var attempt: Self","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/lookahead","title":"var lookAhead: Self","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/stringvalue-1ar8t","title":"var stringValue: GenericParser<Self.StreamType, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/stringvalue-5epq8","title":"var stringValue: GenericParser<Self.StreamType, Self.UserState, String>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parsec\/alternative(_:)","title":"func alternative(Self) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/apply(_:)","title":"func apply<T>(GenericParser<Self.StreamType, Self.UserState, (Self.Result) -> T>) -> GenericParser<Self.StreamType, Self.UserState, T>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/flatmap(_:)","title":"func flatMap<T>((Self.Result) -> GenericParser<Self.StreamType, Self.UserState, T>) -> GenericParser<Self.StreamType, Self.UserState, T>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/labels(_:)","title":"func labels(String...) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/manyaccumulator(_:)","title":"func manyAccumulator((Self.Result, [Self.Result]) -> [Self.Result]) -> GenericParser<Self.StreamType, Self.UserState, [Self.Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/map(_:)","title":"func map<T>((Self.Result) -> T) -> GenericParser<Self.StreamType, Self.UserState, T>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/run(sourcename:input:)","title":"func run(sourceName: String, input: Self.StreamType) throws -> Self.Result","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/run(userstate:sourcename:input:)","title":"func run(userState: Self.UserState, sourceName: String, input: Self.StreamType) throws -> Self.Result","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/runsafe(userstate:sourcename:input:)","title":"func runSafe(userState: Self.UserState, sourceName: String, input: Self.StreamType) -> Either<ParseError, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/test(input:)","title":"func test(input: Self.StreamType)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parsec\/alphanumeric","title":"static var alphaNumeric: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/anycharacter","title":"static var anyCharacter: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/anytoken","title":"static var anyToken: GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/crlf","title":"static var crlf: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/decimaldigit","title":"static var decimalDigit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/digit","title":"static var digit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/empty","title":"static var empty: Self","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/endofline","title":"static var endOfLine: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/eof","title":"static var eof: GenericParser<Self.StreamType, Self.UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/hexadecimaldigit","title":"static var hexadecimalDigit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/letter","title":"static var letter: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/lowercase","title":"static var lowercase: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/newline","title":"static var newLine: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/octaldigit","title":"static var octalDigit: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/sourceposition","title":"static var sourcePosition: GenericParser<Self.StreamType, Self.UserState, SourcePosition>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/space","title":"static var space: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/spaces","title":"static var spaces: GenericParser<Self.StreamType, Self.UserState, ()>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/symbol","title":"static var symbol: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/tab","title":"static var tab: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/unicodespace","title":"static var unicodeSpace: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/uppercase","title":"static var uppercase: GenericParser<Self.StreamType, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/parsec\/userstate-swift.type.property","title":"static var userState: GenericParser<Self.StreamType, Self.UserState, Self.UserState>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parsec\/character(_:)","title":"static func character(Character) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/fail(_:)","title":"static func fail(String) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/memberof(_:)","title":"static func memberOf(CharacterSet) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/noneof(_:)","title":"static func noneOf(String) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/oneof(_:)-2t04j","title":"static func oneOf(ClosedRange<Character>) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/oneof(_:)-7oskn","title":"static func oneOf(String) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/satisfy(_:)","title":"static func satisfy((Character) -> Bool) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/string(_:)","title":"static func string(Self.StreamType) -> GenericParser<Self.StreamType, Self.UserState, Self.StreamType>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/tokenprimitive(tokendescription:nextposition:match:)","title":"static func tokenPrimitive(tokenDescription: (Self.StreamType.Iterator.Element) -> String, nextPosition: (SourcePosition, Self.StreamType.Iterator.Element) -> SourcePosition, match: (Self.StreamType.Iterator.Element) -> Self.Result?) -> GenericParser<Self.StreamType, Self.UserState, Self.Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/tokens(tokensdescription:nextposition:tokens:)","title":"static func tokens(tokensDescription: (Self.StreamType) -> String, nextPosition: (SourcePosition, Self.StreamType) -> SourcePosition, tokens: Self.StreamType) -> GenericParser<Self.StreamType, Self.UserState, Self.StreamType>","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/unexpected(_:)","title":"static func unexpected(String) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/parsec\/updateuserstate(_:)","title":"static func updateUserState((Self.UserState) -> Self.UserState) -> GenericParser<Self.StreamType, Self.UserState, ()>","type":"method"}],"path":"\/documentation\/swiftparsec\/parsec","title":"Parsec","type":"protocol"},{"path":"\/documentation\/swiftparsec\/stream","title":"Stream","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/tokenparser\/userstate","title":"UserState","type":"associatedtype"},{"title":"Instance Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/characterliteral-2gpbp","title":"var characterLiteral: GenericParser<String, Self.UserState, Character>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/characterliteral-65jk4","title":"var characterLiteral: GenericParser<String, Self.UserState, Character>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/colon-4vjcb","title":"var colon: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/colon-j328","title":"var colon: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/comma-9ythx","title":"var comma: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/comma-7w42n","title":"var comma: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/dot-62v61","title":"var dot: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/dot-1kbp","title":"var dot: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/float-5d02a","title":"var float: GenericParser<String, Self.UserState, Double>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/float-u480","title":"var float: GenericParser<String, Self.UserState, Double>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/identifier-4li3d","title":"var identifier: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/identifier-9eupn","title":"var identifier: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/integer-9lg79","title":"var integer: GenericParser<String, Self.UserState, Int>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/integer-686qy","title":"var integer: GenericParser<String, Self.UserState, Int>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/integerasfloat-28jmk","title":"var integerAsFloat: GenericParser<String, Self.UserState, Double>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/integerasfloat-5kdap","title":"var integerAsFloat: GenericParser<String, Self.UserState, Double>","type":"property"},{"path":"\/documentation\/swiftparsec\/tokenparser\/languagedefinition","title":"var languageDefinition: LanguageDefinition<Self.UserState>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/legaloperator-6aqo5","title":"var legalOperator: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/legaloperator-41sh1","title":"var legalOperator: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/natural-9mqmb","title":"var natural: GenericParser<String, Self.UserState, Int>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/natural-3m53g","title":"var natural: GenericParser<String, Self.UserState, Int>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/number-54hjd","title":"var number: GenericParser<String, Self.UserState, Either<Int, Double>>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/number-8k5zn","title":"var number: GenericParser<String, Self.UserState, Either<Int, Double>>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/semicolon-6pvuj","title":"var semicolon: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/semicolon-ayzx","title":"var semicolon: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/stringliteral-6os54","title":"var stringLiteral: GenericParser<String, Self.UserState, String>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/stringliteral-4axff","title":"var stringLiteral: GenericParser<String, Self.UserState, String>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/whitespace-6vjwg","title":"var whiteSpace: GenericParser<String, Self.UserState, ()>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/whitespace-3kep8","title":"var whiteSpace: GenericParser<String, Self.UserState, ()>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/angles(_:)-7fsq6","title":"func angles<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/angles(_:)-34t37","title":"func angles<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/braces(_:)-9rf5m","title":"func braces<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/braces(_:)-vjcm","title":"func braces<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/brackets(_:)-27plv","title":"func brackets<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/brackets(_:)-1o91a","title":"func brackets<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/commaseparated(_:)-7obse","title":"func commaSeparated<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/commaseparated(_:)-42zcs","title":"func commaSeparated<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/commaseparated1(_:)-4vh6k","title":"func commaSeparated1<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/commaseparated1(_:)-5dwum","title":"func commaSeparated1<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/lexeme(_:)-bw","title":"func lexeme<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/lexeme(_:)-1x6i1","title":"func lexeme<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/parentheses(_:)-1v3z4","title":"func parentheses<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/parentheses(_:)-7bpfh","title":"func parentheses<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/reservedname(_:)-7w1zs","title":"func reservedName(String) -> GenericParser<String, Self.UserState, ()>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/reservedname(_:)-612s2","title":"func reservedName(String) -> GenericParser<String, Self.UserState, ()>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/reservedoperator(_:)-3xrkx","title":"func reservedOperator(String) -> GenericParser<String, Self.UserState, ()>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/reservedoperator(_:)-9eq7s","title":"func reservedOperator(String) -> GenericParser<String, Self.UserState, ()>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/semicolonseparated(_:)-6387x","title":"func semicolonSeparated<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/semicolonseparated(_:)-7bxum","title":"func semicolonSeparated<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/semicolonseparated1(_:)-1tcg3","title":"func semicolonSeparated1<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/semicolonseparated1(_:)-1i6mw","title":"func semicolonSeparated1<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/symbol(_:)-78otu","title":"func symbol(String) -> GenericParser<String, Self.UserState, String>","type":"method"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/symbol(_:)-ibpl","title":"func symbol(String) -> GenericParser<String, Self.UserState, String>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/decimal-1ureu","title":"static var decimal: GenericParser<String, Self.UserState, Int>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/decimal-69de2","title":"static var decimal: GenericParser<String, Self.UserState, Int>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/hexadecimal-8de8v","title":"static var hexadecimal: GenericParser<String, Self.UserState, Int>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/hexadecimal-4ahww","title":"static var hexadecimal: GenericParser<String, Self.UserState, Int>","type":"property"},{"children":[{"children":[{"path":"\/documentation\/swiftparsec\/tokenparser\/octal-52hbr","title":"static var octal: GenericParser<String, Self.UserState, Int>","type":"property"}],"title":"TokenParser Implementations","type":"groupMarker"}],"path":"\/documentation\/swiftparsec\/tokenparser\/octal-4mj8h","title":"static var octal: GenericParser<String, Self.UserState, Int>","type":"property"}],"path":"\/documentation\/swiftparsec\/tokenparser","title":"TokenParser","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/configuration\/localizestring","title":"static var localizeString: (String) -> String","type":"property"}],"path":"\/documentation\/swiftparsec\/configuration","title":"Configuration","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/init(languagedefinition:)","title":"init(languageDefinition: LanguageDefinition<UserState>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/languagedefinition","title":"let languageDefinition: LanguageDefinition<UserState>","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/characterliteral","title":"var characterLiteral: GenericParser<String, Self.UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/colon","title":"var colon: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/comma","title":"var comma: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/dot","title":"var dot: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/float","title":"var float: GenericParser<String, Self.UserState, Double>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/identifier","title":"var identifier: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/integer","title":"var integer: GenericParser<String, Self.UserState, Int>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/integerasfloat","title":"var integerAsFloat: GenericParser<String, Self.UserState, Double>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/legaloperator","title":"var legalOperator: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/natural","title":"var natural: GenericParser<String, Self.UserState, Int>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/number","title":"var number: GenericParser<String, Self.UserState, Either<Int, Double>>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/semicolon","title":"var semicolon: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/stringliteral","title":"var stringLiteral: GenericParser<String, Self.UserState, String>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/whitespace","title":"var whiteSpace: GenericParser<String, Self.UserState, ()>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/angles(_:)","title":"func angles<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/braces(_:)","title":"func braces<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/brackets(_:)","title":"func brackets<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/commaseparated(_:)","title":"func commaSeparated<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/commaseparated1(_:)","title":"func commaSeparated1<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/lexeme(_:)","title":"func lexeme<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/parentheses(_:)","title":"func parentheses<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/reservedname(_:)","title":"func reservedName(String) -> GenericParser<String, Self.UserState, ()>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/reservedoperator(_:)","title":"func reservedOperator(String) -> GenericParser<String, Self.UserState, ()>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/semicolonseparated(_:)","title":"func semicolonSeparated<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/semicolonseparated1(_:)","title":"func semicolonSeparated1<Result>(GenericParser<String, Self.UserState, Result>) -> GenericParser<String, Self.UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/symbol(_:)","title":"func symbol(String) -> GenericParser<String, Self.UserState, String>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/decimal","title":"static var decimal: GenericParser<String, Self.UserState, Int>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/hexadecimal","title":"static var hexadecimal: GenericParser<String, Self.UserState, Int>","type":"property"},{"path":"\/documentation\/swiftparsec\/generictokenparser\/octal","title":"static var octal: GenericParser<String, Self.UserState, Int>","type":"property"}],"path":"\/documentation\/swiftparsec\/generictokenparser\/tokenparser-implementations","title":"TokenParser Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/generictokenparser","title":"GenericTokenParser","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/allownestedcomments","title":"var allowNestedComments: Bool","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/characterescape","title":"var characterEscape: GenericParser<String, UserState, Character>?","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/commentend","title":"var commentEnd: String","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/commentline","title":"var commentLine: String","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/commentstart","title":"var commentStart: String","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/identifierletter","title":"var identifierLetter: (Character) -> GenericParser<String, UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/identifierstart","title":"var identifierStart: GenericParser<String, UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/iscasesensitive","title":"var isCaseSensitive: Bool","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/operatorletter","title":"var operatorLetter: GenericParser<String, UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/operatorstart","title":"var operatorStart: GenericParser<String, UserState, Character>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/reservednames","title":"var reservedNames: Set<String>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/reservedoperators","title":"var reservedOperators: Set<String>","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/empty","title":"static var empty: LanguageDefinition<UserState>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/javastyle","title":"static var javaStyle: LanguageDefinition<UserState>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/json","title":"static var json: LanguageDefinition<UserState>","type":"property"},{"path":"\/documentation\/swiftparsec\/languagedefinition\/swift","title":"static var swift: LanguageDefinition<UserState>","type":"property"}],"path":"\/documentation\/swiftparsec\/languagedefinition","title":"LanguageDefinition","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/init()","title":"init()","type":"init"},{"path":"\/documentation\/swiftparsec\/operatortable\/init(arrayliteral:)","title":"init(arrayLiteral: OperatorTable<StreamType, UserState, Result>.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/startindex","title":"let startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/index(after:)","title":"func index(after: OperatorTable<StreamType, UserState, Result>.Index) -> OperatorTable<StreamType, UserState, Result>.Index","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/makeexpressionparser(_:)","title":"func makeExpressionParser((GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, Result>","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/replacesubrange(_:with:)-82pf4","title":"func replaceSubrange<C>(Range<OperatorTable<StreamType, UserState, Result>.Index>, with: C)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/subscript(_:)-17nq9","title":"subscript(OperatorTable<StreamType, UserState, Result>.Index) -> OperatorTable<StreamType, UserState, Result>.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/element","title":"OperatorTable.Element","type":"typealias"},{"path":"\/documentation\/swiftparsec\/operatortable\/index","title":"OperatorTable.Index","type":"typealias"},{"path":"\/documentation\/swiftparsec\/operatortable\/iterator","title":"OperatorTable.Iterator","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/underestimatedcount-2ulma","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/contains(_:)-76oo4","title":"func contains<C>(C) -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/map(_:)-3y1vm","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/split(separator:maxsplits:omittingemptysubsequences:)-6m4aq","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/split(separator:maxsplits:omittingemptysubsequences:)-ffdf","title":"func split<C>(separator: C, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/subscript(_:)-5clqa","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/swiftparsec\/operatortable\/subscript(_:)-5o7qp","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/swiftparsec\/operatortable\/subscript(_:)-lc63","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/swiftparsec\/operatortable\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/+(_:_:)-4lb9l","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/operatortable\/+(_:_:)-6cpnn","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/operatortable\/+(_:_:)-9sq9l","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/operatortable\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/swiftparsec\/operatortable\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/append(_:)","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/appending(_:)","title":"func appending(Self.Iterator.Element) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/prepend(_:)","title":"func prepend(Self.Iterator.Element)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/prepending(_:)","title":"func prepending(Self.Iterator.Element) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/removeall(where:)","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/removesubrange(_:)-9bzz4","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/removesubrange(_:)-jiqa","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/replacesubrange(_:with:)-2mqsh","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/replacesubrange(_:with:)-7k7tw","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/swiftparsec\/operatortable\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/swiftparsec\/operatortable\/underestimatedcount-8ggxc","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operatortable\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/contains(_:)-4uuyy","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/flatmap(_:)-3sn4f","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/flatmap(_:)-qvb8","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/joined(separator:)","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/map(_:)-7g6kc","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/sorted(using:)-3pehu","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/sorted(using:)-9ixpr","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/split(separator:maxsplits:omittingemptysubsequences:)-9pt6j","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/operatortable\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/swiftparsec\/operatortable\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/operatortable","title":"OperatorTable","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parseerror\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/swiftparsec\/parseerror\/messages","title":"var messages: [ErrorMessage]","type":"property"},{"path":"\/documentation\/swiftparsec\/parseerror\/position","title":"var position: SourcePosition","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parseerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/swiftparsec\/parseerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/parseerror","title":"ParseError","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/init()","title":"init()","type":"init"},{"path":"\/documentation\/swiftparsec\/permutation\/init(arrayliteral:)","title":"init(arrayLiteral: Permutation<StreamType, UserState, Result>.Element...)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/startindex","title":"let startIndex: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/appendoptionalparser(_:otherwise:)","title":"func appendOptionalParser(GenericParser<StreamType, UserState, Result>, otherwise: Result)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/appendparser(_:)","title":"func appendParser(GenericParser<StreamType, UserState, Result>)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/index(after:)","title":"func index(after: Permutation<StreamType, UserState, Result>.Index) -> Permutation<StreamType, UserState, Result>.Index","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/makeparser()","title":"func makeParser() -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/makeparser(separator:)","title":"func makeParser<Separator>(separator: GenericParser<StreamType, UserState, Separator>) -> GenericParser<StreamType, UserState, [Result]>","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/replacesubrange(_:with:)-6e7qz","title":"func replaceSubrange<C>(Range<Permutation<StreamType, UserState, Result>.Index>, with: C)","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/subscript(_:)-3gt9c","title":"subscript(Permutation<StreamType, UserState, Result>.Index) -> Permutation<StreamType, UserState, Result>.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/element","title":"Permutation.Element","type":"typealias"},{"path":"\/documentation\/swiftparsec\/permutation\/index","title":"Permutation.Index","type":"typealias"},{"path":"\/documentation\/swiftparsec\/permutation\/iterator","title":"Permutation.Iterator","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/underestimatedcount-6b12s","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/map(_:)-710cq","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/subscript(_:)-14f5p","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/swiftparsec\/permutation\/subscript(_:)-4hle8","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/swiftparsec\/permutation\/subscript(_:)-7ebyb","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/swiftparsec\/permutation\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/+(_:_:)-1aam5","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/permutation\/+(_:_:)-83jvd","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/permutation\/+(_:_:)-8pon","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/swiftparsec\/permutation\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/init(_:)","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/swiftparsec\/permutation\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/append(_:)","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/appending(_:)","title":"func appending(Self.Iterator.Element) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/prepend(_:)","title":"func prepend(Self.Iterator.Element)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/prepending(_:)","title":"func prepending(Self.Iterator.Element) -> Self","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/removeall(where:)","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/removesubrange(_:)-1q50o","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/removesubrange(_:)-8li5c","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/replacesubrange(_:with:)-3phd3","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/replacesubrange(_:with:)-7hjzu","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/swiftparsec\/permutation\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"path":"\/documentation\/swiftparsec\/permutation\/underestimatedcount-8m3tl","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/permutation\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/flatmap(_:)-3x1ku","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/flatmap(_:)-8ztz9","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/map(_:)-486da","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/sorted(using:)-4olg","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/sorted(using:)-6m4m8","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/swiftparsec\/permutation\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/swiftparsec\/permutation\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/permutation","title":"Permutation","type":"struct"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/sourceposition\/column","title":"var column: Int","type":"property"},{"path":"\/documentation\/swiftparsec\/sourceposition\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/swiftparsec\/sourceposition\/line","title":"var line: Int","type":"property"},{"path":"\/documentation\/swiftparsec\/sourceposition\/name","title":"var name: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/sourceposition\/'...(_:)-16tzh","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/'...(_:)-3dqg5","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/_(_:_:)","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/_=(_:_:)-7ghdi","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/sourceposition\/_=(_:_:)-97di5","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftparsec\/sourceposition\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/sourceposition\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftparsec\/sourceposition\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/sourceposition","title":"SourcePosition","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/*_(_:_:)","title":"func *> <StreamType, UserState, Param1, Param2>(GenericParser<StreamType, UserState, Param1>, GenericParser<StreamType, UserState, Param2>) -> GenericParser<StreamType, UserState, Param2>","type":"op"},{"path":"\/documentation\/swiftparsec\/==(_:_:)-66ml4","title":"func == (SourcePosition, SourcePosition) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/==(_:_:)-7hpgc","title":"func == (ErrorMessage, ErrorMessage) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/_(_:_:)-1edl0","title":"func < (SourcePosition, SourcePosition) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/_(_:_:)-383vz","title":"func < (ErrorMessage, ErrorMessage) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/_*(_:_:)","title":"func <* <StreamType, UserState, Param1, Param2>(GenericParser<StreamType, UserState, Param1>, GenericParser<StreamType, UserState, Param2>) -> GenericParser<StreamType, UserState, Param1>","type":"op"},{"path":"\/documentation\/swiftparsec\/_*_(_:_:)","title":"func <*> <StreamType, UserState, Result, T>(GenericParser<StreamType, UserState, (Result) -> T>, GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, T>","type":"op"},{"path":"\/documentation\/swiftparsec\/__-(_:_:)","title":"func >>- <StreamType, UserState, Result, T>(GenericParser<StreamType, UserState, Result>, (Result) -> GenericParser<StreamType, UserState, T>) -> GenericParser<StreamType, UserState, T>","type":"op"},{"path":"\/documentation\/swiftparsec\/___(_:_:)","title":"func <^> <StreamType, UserState, Result, T>((Result) -> T, GenericParser<StreamType, UserState, Result>) -> GenericParser<StreamType, UserState, T>","type":"op"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/characterset","title":"CharacterSet","type":"typealias"},{"path":"\/documentation\/swiftparsec\/stringparser","title":"StringParser","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/associativity\/left","title":"case left","type":"case"},{"path":"\/documentation\/swiftparsec\/associativity\/none","title":"case none","type":"case"},{"path":"\/documentation\/swiftparsec\/associativity\/right","title":"case right","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/associativity\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftparsec\/associativity\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/associativity","title":"Associativity","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/either\/left(_:)","title":"case left(L)","type":"case"},{"path":"\/documentation\/swiftparsec\/either\/right(_:)","title":"case right(R)","type":"case"}],"path":"\/documentation\/swiftparsec\/either","title":"Either","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/errormessage\/expected(_:)","title":"case expected(String)","type":"case"},{"path":"\/documentation\/swiftparsec\/errormessage\/generic(_:)","title":"case generic(String)","type":"case"},{"path":"\/documentation\/swiftparsec\/errormessage\/systemunexpected(_:)","title":"case systemUnexpected(String)","type":"case"},{"path":"\/documentation\/swiftparsec\/errormessage\/unexpected(_:)","title":"case unexpected(String)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/errormessage\/'...(_:)-301pr","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/'...(_:)-5dq20","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/_(_:_:)","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/_=(_:_:)-62bj","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/swiftparsec\/errormessage\/_=(_:_:)-77xc5","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftparsec\/errormessage\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/errormessage\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/swiftparsec\/errormessage\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/swiftparsec\/errormessage","title":"ErrorMessage","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/operator\/infix(_:_:)","title":"case infix(GenericParser<StreamType, UserState, (Result, Result) -> Result>, Associativity)","type":"case"},{"path":"\/documentation\/swiftparsec\/operator\/postfix(_:)","title":"case postfix(GenericParser<StreamType, UserState, (Result) -> Result>)","type":"case"},{"path":"\/documentation\/swiftparsec\/operator\/prefix(_:)","title":"case prefix(GenericParser<StreamType, UserState, (Result) -> Result>)","type":"case"}],"path":"\/documentation\/swiftparsec\/operator","title":"Operator","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/swiftparsec\/parseerrortype\/expected(_:)","title":"case expected(String)","type":"case"},{"path":"\/documentation\/swiftparsec\/parseerrortype\/generic(_:)","title":"case generic(String)","type":"case"},{"path":"\/documentation\/swiftparsec\/parseerrortype\/systemunexpected(_:)","title":"case systemUnexpected(String)","type":"case"},{"path":"\/documentation\/swiftparsec\/parseerrortype\/unexpected(_:)","title":"case unexpected(String)","type":"case"}],"path":"\/documentation\/swiftparsec\/parseerrortype","title":"ParseErrorType","type":"enum"}],"path":"\/documentation\/swiftparsec","title":"SwiftParsec","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}